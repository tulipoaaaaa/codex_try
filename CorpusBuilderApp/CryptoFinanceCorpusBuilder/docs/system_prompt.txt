# CryptoFinanceCorpusBuilder System Documentation

## System Overview
The CryptoFinanceCorpusBuilder is a comprehensive system for collecting, processing, and managing financial data from various sources. The system is designed to be run locally as a Python application, with all components integrated through a ProjectConfig system for environment management. The system features a modern, user-friendly interface for monitoring and controlling the data collection and processing pipeline.

## Core Components

### 1. Collectors
Located in `shared_tools/collectors/`, these components fetch data from various sources:

#### ISDA Collector
- Purpose: Collects ISDA documentation and agreements
- Features:
  - Downloads PDFs from ISDA website
  - Validates file integrity
  - Generates metadata
  - Saves to `raw_data/ISDA`
- Configuration: Requires ISDA credentials in .env
- Metadata Format:
  ```json
  {
    "source": "ISDA",
    "document_id": "unique_id",
    "title": "document_title",
    "category": "document_category",
    "download_date": "YYYY-MM-DD HH:MM:SS",
    "file_size": "size_in_bytes",
    "file_hash": "md5_hash",
    "url": "source_url",
    "processing_status": "raw|processed|failed"
  }
  ```

#### Quantopian Collector
- Purpose: Collects algorithmic trading research
- Features:
  - Clones Quantopian research repository
  - Processes Jupyter notebooks
  - Extracts code and documentation
  - Saves to `raw_data/Quantopian`
- Configuration: No API keys required
- Metadata Format:
  ```json
  {
    "source": "Quantopian",
    "algorithm_id": "unique_id",
    "title": "algorithm_title",
    "author": "author_name",
    "creation_date": "YYYY-MM-DD",
    "languages": ["python", "other_languages"],
    "dependencies": ["package1", "package2"],
    "notebook_cells": {
      "code": count,
      "markdown": count,
      "total": count
    },
    "processing_status": "raw|processed|failed"
  }
  ```

#### GitHub Collector
- Purpose: Collects financial code repositories
- Features:
  - Searches GitHub for financial repositories
  - Filters by language and topic
  - Downloads repositories
  - Saves to `raw_data/GitHub`
- Configuration: Requires GitHub API token in .env
- Metadata Format:
  ```json
  {
    "source": "GitHub",
    "repo_id": "unique_id",
    "name": "repository_name",
    "owner": "owner_name",
    "description": "repo_description",
    "topics": ["topic1", "topic2"],
    "languages": ["language1", "language2"],
    "stars": count,
    "forks": count,
    "last_updated": "YYYY-MM-DD",
    "processing_status": "raw|processed|failed"
  }
  ```

### 2. Processors
Located in `shared_tools/processors/`, these components transform raw data:

#### PDF Processor
- Purpose: Extracts text from PDF documents
- Features:
  - OCR support using Tesseract
  - Metadata extraction
  - Text cleaning and normalization
  - Saves to `extracted/pdf`
- Processing Steps:
  1. Text extraction with PyPDF2
  2. OCR for scanned documents
  3. Text cleaning (remove headers, footers)
  4. Metadata enrichment
  5. Save processed text and metadata
- Output Format:
  ```json
  {
    "original_metadata": {...},
    "processed_metadata": {
      "word_count": count,
      "page_count": count,
      "has_tables": boolean,
      "has_images": boolean,
      "processing_date": "YYYY-MM-DD HH:MM:SS",
      "processing_version": "version",
      "processing_status": "success|failed",
      "error_message": "if failed"
    },
    "extracted_text": "cleaned_text_content"
  }
  ```

#### Non-PDF Processor
- Purpose: Processes code and documentation files
- Features:
  - Language detection using Pygments
  - Code extraction and formatting
  - Documentation parsing
  - Saves to `extracted/nonpdf`
- Processing Steps:
  1. File type detection
  2. Language identification
  3. Code extraction and formatting
  4. Documentation parsing
  5. Metadata enrichment
- Output Format:
  ```json
  {
    "original_metadata": {...},
    "processed_metadata": {
      "file_type": "type",
      "language": "detected_language",
      "code_blocks": count,
      "doc_blocks": count,
      "processing_date": "YYYY-MM-DD HH:MM:SS",
      "processing_version": "version",
      "processing_status": "success|failed",
      "error_message": "if failed"
    },
    "extracted_content": {
      "code": ["code_block1", "code_block2"],
      "documentation": ["doc_block1", "doc_block2"]
    }
  }
  ```

### 3. Corpus Manager
Located in `shared_tools/corpus_manager.py`:
- Purpose: Manages the entire corpus
- Features:
  - Tracks all collected data
  - Maintains metadata
  - Handles file organization
  - Integrates with ProjectConfig
- Directory Structure:
  ```
  corpus/
  ├── raw_data/
  │   ├── ISDA/
  │   ├── Quantopian/
  │   └── GitHub/
  ├── extracted/
  │   ├── pdf/
  │   └── nonpdf/
  ├── metadata/
  │   ├── collectors/
  │   ├── processors/
  │   └── corpus_stats.json
  └── logs/
      ├── collectors/
      ├── processors/
      └── system.log
  ```

### 4. Corpus Balancer
Located in `shared_tools/corpus_balancer.py`:
- Purpose: Balances the corpus across different domains
- Features:
  - Analyzes corpus composition
  - Identifies imbalances
  - Suggests collection targets
  - Supports auto-rebalancing
- Balance Metrics:
  ```json
  {
    "domain_distribution": {
      "ISDA": percentage,
      "Quantopian": percentage,
      "GitHub": percentage
    },
    "content_types": {
      "pdf": percentage,
      "code": percentage,
      "documentation": percentage
    },
    "recommendations": {
      "collect_more": ["domain1", "domain2"],
      "target_distribution": {...}
    }
  }
  ```

## User Interface Requirements

### Main Dashboard
- Modern, clean design using PyQt6
- Real-time monitoring of:
  - Collection progress
  - Processing status
  - Corpus statistics
  - System health
- Interactive controls for:
  - Starting/stopping collectors
  - Processing data
  - Viewing results
  - Managing corpus

### Features
1. **Status Overview**
   - Collection progress bars
   - Processing status indicators
   - Error notifications
   - System resource usage

2. **Data Management**
   - File browser with search
   - Metadata viewer
   - Content preview
   - Export options

3. **Configuration**
   - Environment selection
   - Collector settings
   - Processor options
   - Balance targets

4. **Reports**
   - Collection statistics
   - Processing results
   - Corpus balance
   - System logs

### UI Components
```python
# Example UI structure using PyQt6
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("CryptoFinanceCorpusBuilder")
        self.setMinimumSize(1200, 800)
        
        # Create main layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)
        
        # Add components
        self.add_status_bar()
        self.add_toolbar()
        self.add_main_content()
        self.add_sidebar()
        
    def add_status_bar(self):
        # Status indicators
        pass
        
    def add_toolbar(self):
        # Action buttons
        pass
        
    def add_main_content(self):
        # Main content area
        pass
        
    def add_sidebar(self):
        # Navigation and controls
        pass
```

## ProjectConfig Integration
The system uses ProjectConfig for environment management:

### Configuration Files
- `config/test_config.yaml`: Test environment settings
- `config/master_config.yaml`: Production environment settings

### Environment Variables
Create a `.env` file in the project root with:
```
ISDA_USERNAME=your_username
ISDA_PASSWORD=your_password
GITHUB_TOKEN=your_github_token
```

## Directory Structure
```
CryptoFinanceCorpusBuilder/
├── config/
│   ├── test_config.yaml
│   └── master_config.yaml
├── shared_tools/
│   ├── collectors/
│   │   ├── isda_collector.py
│   │   ├── quantopian_collector.py
│   │   └── github_collector.py
│   ├── processors/
│   │   ├── pdf_processor.py
│   │   └── nonpdf_processor.py
│   ├── corpus_manager.py
│   └── corpus_balancer.py
├── tests/
│   └── ProjectConfigCollectorTests/
└── .env
```

## Pending Tasks

### 1. Processor Tests
- [ ] Create test suite for PDF processor
- [ ] Create test suite for non-PDF processor
- [ ] Test processor integration with ProjectConfig
- [ ] Test processor error handling

### 2. Corpus Balancer
- [ ] Implement auto-rebalancing logic
- [ ] Add balance metrics calculation
- [ ] Create balance reports
- [ ] Test balance recommendations

### 3. Integration Tests
- [ ] Test full pipeline from collection to processing
- [ ] Test corpus management with all collectors
- [ ] Test environment switching
- [ ] Test error recovery

## Usage Instructions

### Installation
1. Clone the repository
2. Create and activate a virtual environment
3. Install dependencies: `pip install -r requirements.txt`
4. Create `.env` file with required credentials
5. Configure environment in `config/` directory

### Running the System
1. Set environment:
   ```python
   from shared_tools.project_config import ProjectConfig
   config = ProjectConfig('config/test_config.yaml', environment='test')
   ```

2. Run collectors:
   ```python
   from shared_tools.collectors import ISDACollector, QuantopianCollector, GitHubCollector
   
   # Initialize collectors
   isda_collector = ISDACollector(config)
   quantopian_collector = QuantopianCollector(config)
   github_collector = GitHubCollector(config)
   
   # Collect data
   isda_collector.collect()
   quantopian_collector.collect()
   github_collector.collect()
   ```

3. Process data:
   ```python
   from shared_tools.processors import PDFProcessor, NonPDFProcessor
   
   # Initialize processors
   pdf_processor = PDFProcessor(config)
   nonpdf_processor = NonPDFProcessor(config)
   
   # Process data
   pdf_processor.process()
   nonpdf_processor.process()
   ```

4. Manage corpus:
   ```python
   from shared_tools.corpus_manager import CorpusManager
   
   # Initialize corpus manager
   corpus_manager = CorpusManager(config)
   
   # Get corpus statistics
   stats = corpus_manager.get_statistics()
   ```

5. Balance corpus:
   ```python
   from shared_tools.corpus_balancer import CorpusBalancer
   
   # Initialize corpus balancer
   balancer = CorpusBalancer(config)
   
   # Get balance recommendations
   recommendations = balancer.get_recommendations()
   ```

## Error Handling
- All components include comprehensive error handling
- Errors are logged to appropriate log files
- Failed operations can be retried
- System maintains state for recovery

## Performance Considerations
- Collectors use rate limiting to avoid API restrictions
- Processors use multiprocessing for large files
- Corpus manager uses efficient indexing
- Balancer uses incremental updates

## Security
- API credentials stored in .env file
- No sensitive data in code
- Secure file handling
- Access control for production environment

## Future Enhancements
1. Add more collectors for additional sources
2. Implement advanced processing techniques
3. Add machine learning for content analysis
4. Create web interface for monitoring
5. Add export functionality for different formats
6. Implement real-time corpus analysis
7. Add collaborative features
8. Support for custom collectors
9. Advanced visualization tools
10. Automated testing suite

## Support
For issues and feature requests, please create an issue in the repository. 