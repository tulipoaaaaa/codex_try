{
  "hard_rules": {
    "ui_qt_framework": [
      "PySide6 only. Importing or depending on PyQt6 is forbidden.",
      "Single-inheritance for widgets. Every UI wrapper class must inherit only from a Qt widget (usually QWidget). No mixins like BaseWrapper or ProcessorMixin.",
      "No super() chains that reach non-Qt parents. Call QWidget.__init__(self, parent) directly.",
      "Public signals/slots/methods may not be renamed, removed, or have their signatures altered.",
      "Constructor arguments of existing widgets must stay identical.",
      "No unsolicited visual or layout changes. UI layout, styles, and assets are considered stable unless a visual bug is explicitly flagged.",
      "All UI setup must be in setup_ui(). No UI logic in base classes or outside the wrapper.",
      "All signal/slot connections must be in setup_connections()."
    ],
    "architecture_delegation": [
      "Wrappers own their config, logger, and processor instances explicitly – nothing is inherited.",
      "Signals are defined in the wrapper itself and connected in a setup_connections() helper.",
      "Business logic lives in backend services/processors; wrappers use explicit delegation (self.processor.start(), etc.).",
      "TaskQueueManager, SystemMonitor, CorpusStatsService, etc. remain the authoritative back-end hubs; no shortcut logic in the UI layers.",
      "No global state in UI wrappers. All state must be instance-local or managed by backend services."
    ],
    "coding_standards_quality": [
      "Keep code Python 3.11-compatible and GPU-aware (32 GB VRAM target).",
      "No use of deprecated Qt APIs or Python features.",
      "All patches must update CHANGELOG.md and docs/progress_log.md with a one-liner.",
      "Filenames and package paths must follow the audit conventions (e.g., financial_symbol_processor.py, never finacial_…).",
      "Add missing __init__.py files so every directory is a package.",
      "No placeholder, mock, or test logic in production code."
    ],
    "testing_ci": [
      "pytest must discover and run both /tests and CorpusBuilderApp/tests.",
      "New bugfixes require a unit or integration test reproducing the failure.",
      "GUI launch in CI/headless must not crash; if Qt plugins are missing, supply a shim or mark xfail.",
      "All new/changed signals, slots, and public methods must have a test."
    ],
    "codex_usage": [
      "Every change is preceded by an audit report → “OK” confirmation loop. No fix is applied until I green-light it.",
      "Cursor prompt headers must restate the critical constraints (PySide6-only, single-inheritance, etc.).",
      "No placeholder or mock logic in final commits; production code only.",
      "Each audit/fix must log artefacts to audit_reports/ for traceability."
    ],
    "performance_resources": [
      "Assume 64 GB RAM / 32 GB VRAM; design data pipelines to exploit available memory without hard-coding GPU IDs.",
      "For CLI/GUI long tasks, provide real-time progress feedback (Qt dialog or CLI bar).",
      "Persistent global hash index governs deduplication; never bypass it."
    ],
    "documentation_roadmapping": [
      "All features require doc updates (README, docs/cli_vs_gui_matrix.md, etc.).",
      "Queued tasks and stretch goals (export tooling, corpus diff, dashboard visuals, etc.) must remain preserved until completed."
    ],
    "security_compliance": [
      "Crypto exchange code must stay Hyperliquid-only for trading.",
      "Sensitive keys/secrets must remain in the existing secret-handling vault—never hard-code."
    ]
  }
}